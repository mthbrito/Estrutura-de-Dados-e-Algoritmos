import algorithms.BinarySearch;
import algorithms.BinaryTree;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static algorithms.BinarySearch.binarySearch;
import static algorithms.BubbleSort.bubbleSort;
import static algorithms.InsertionSort.insertionSort;
import static algorithms.LinearSearch.linearSearch;
import static algorithms.MergeSort.mergeSort;
import static algorithms.QuickSort.quickSort;
import static algorithms.SelectionSort.selectionSort;

public class Main {
    public static void main(String[] args) {

        int[] nums1 = {6, 5, 2, 8, 9, 4};

        int[] nums2 = {
                874, 321, 543, 765, 123, 456, 987, 234, 678, 890,
                111, 222, 333, 444, 555, 666, 777, 888, 999, 100,
                219, 318, 417, 516, 615, 714, 813, 912, 101, 202,
                303, 404, 505, 606, 707, 808, 909, 110, 220, 330,
                440, 550, 660, 770, 880, 990, 121, 232, 343, 454,
                514, 615, 716, 817, 918, 119, 218, 317, 416, 515,
                614, 713, 812, 911, 120, 221, 322, 423, 524, 625,
                726, 827, 928, 129, 238, 347, 456, 565, 674, 783,
                892, 921, 130, 231, 332, 433, 534, 635, 736, 837,
                938, 139, 240, 341, 442, 543, 644, 745, 846, 947,
                148, 249, 350, 451, 552, 653, 754, 855, 956, 157,
                311, 422, 533, 644, 755, 866, 977, 199, 211, 322,
                565, 676, 787, 898, 909, 112, 223, 334, 445, 556,
                667, 778, 889, 991, 122, 233, 344, 455, 566, 677,
                788, 899, 911, 133, 244, 355, 466, 577, 688, 799,
                811, 922, 144, 255, 366, 477, 588, 699, 711, 822,
                933, 155, 266, 377, 488, 599, 611, 722, 833, 944,
                166, 277, 388, 499, 511, 622, 733, 844, 955, 177,
                288, 399, 411, 522, 633, 744, 855, 966, 188, 299,
                106, 207, 308, 409, 510, 611, 712, 813, 914, 107,
                208, 309, 410, 511, 612, 713, 814, 915, 108, 209,
                310, 411, 512, 613, 714, 815, 916, 109, 210, 311,
                412, 513, 614, 715, 816, 917, 110, 211, 312, 413,
                729, 820, 911, 102, 193, 284, 375, 466, 557, 648,
                739, 830, 921, 112, 203, 294, 385, 476, 567, 658,
                749, 840, 931, 122, 213, 304, 395, 486, 577, 668,
                759, 850, 941, 132, 223, 314, 405, 496, 587, 678,
                769, 860, 951, 142, 233, 324, 415, 506, 597, 688,
                829, 920, 111, 202, 293, 384, 475, 566, 657, 748,
                839, 930, 121, 212, 303, 394, 485, 576, 667, 758,
                849, 940, 131, 222, 313, 404, 495, 586, 677, 768,
                433, 544, 655, 766, 877, 988, 999, 111, 222, 333,
                444, 555, 666, 777, 888, 999, 100, 200, 300, 400,
                500, 600, 700, 800, 900, 101, 201, 301, 401, 501,
                601, 701, 801, 901, 102, 203, 304, 405, 506, 607,
                708, 809, 910, 103, 204, 305, 406, 507, 608, 709,
                810, 911, 104, 205, 306, 407, 508, 609, 710, 811,
                912, 105, 206, 307, 408, 509, 610, 711, 812, 913,
                258, 359, 460, 561, 662, 763, 864, 965, 166, 267,
                368, 469, 570, 671, 772, 873, 974, 175, 276, 377,
                478, 579, 680, 781, 882, 983, 184, 285, 386, 487,
                588, 689, 790, 891, 992, 193, 294, 395, 496, 597,
                698, 799, 891, 982, 173, 264, 355, 446, 537, 628,
                719, 810, 901, 992, 183, 274, 365, 456, 547, 638,
                859, 950, 141, 232, 323, 414, 505, 596, 687, 778,
                869, 960, 151, 242, 333, 424, 515, 606, 697, 788,
                879, 970, 161, 252, 343, 434, 525, 616, 707, 798,
                930, 121, 212, 303, 394, 485, 576, 667, 758, 849,
                940, 131, 222, 313, 404, 495, 586, 677, 768, 859,
                950, 141, 232, 323, 414, 505, 596, 687, 778, 869,
                960, 151, 242, 333, 424, 515, 606, 697, 788, 879,
                809, 900, 991, 182, 273, 364, 455, 546, 637, 728,
                819, 910, 101, 192, 283, 374, 465, 556, 647, 738,
                899, 990, 181, 272, 363, 454, 545, 636, 727, 818,
                909, 1000, 191, 282, 373, 464, 555, 646, 737, 828,
                919, 101, 192, 283, 374, 465, 556, 647, 738, 829,
                920, 111, 202, 293, 384, 475, 566, 657, 748, 839,
                970, 161, 252, 343, 434, 525, 616, 707, 798, 889,
                889, 980, 171, 262, 353, 444, 535, 626, 717, 808,
                779, 870, 961, 152, 243, 334, 425, 516, 607, 698,
                789, 880, 971, 162, 253, 344, 435, 526, 617, 708,
                799, 890, 981, 172, 263, 354, 445, 536, 627, 718,
                980, 171, 262, 353, 444, 535, 626, 717, 808, 899,
                990, 181, 272, 363, 454, 545, 636, 727, 818, 909,
                1000
        };

        int[] arr1 = nums2.clone();
        int[] arr2 = nums2.clone();
        int[] arr3 = nums2.clone();
        int[] arr4 = nums2.clone();
        int[] arr5 = nums2 .clone();

//        time(() -> bubbleSort(arr1), "Bubble Sort"); //5.9028
//        time(() -> insertionSort(arr2), "Insertion Sort"); //4.563
//        time(() -> mergeSort(arr3, 0, arr3.length - 1), "Merge Sort"); //1.9664
//        time(() -> quickSort(arr4, 0, arr3.length - 1), "Quick Sort"); //1.0175
//        time(() -> selectionSort(arr5), "Selection Sort"); // 3.5456

        BinaryTree binaryTree = new BinaryTree();
        binaryTree.insert(8);
        binaryTree.insert(7);
        binaryTree.insert(12);
        binaryTree.insert(15);
        binaryTree.insert(2);
        binaryTree.insert(5);
        binaryTree.inOrder();
        System.out.println();
        binaryTree.preOrder();
    }

    public static void time(Runnable task, String name) {
        long startTime = System.nanoTime();
        task.run();
        long endTime = System.nanoTime();
        System.out.println("Execution time of " + name + ": " + (endTime - startTime) / 1_000_000.0 + " ms");
    }

    public static void show(int[] arr) {
        for(int i : arr) System.out.print(i + " ");
    }
}